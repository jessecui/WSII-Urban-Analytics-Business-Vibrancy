# Stack dataframes on top of each other
lots_data <- rbind(greened_data, vacant_data)
colnames(vacant_data)
colnames(greened_data)
colnames(greened_data) == colnames(lots_data)
colnames(greened_data) == colnames(vacant_data)
colnames(vacant_data)
greened_data = read.csv("../neat_data/processed_data/greened_attr_with_business_new.csv")
greened_data['greened'] = 1
greened_data$id.1 <- NULL
vacant_data = read.csv("../neat_data/processed_data/vacant_attr_with_business_new.csv")
vacant_data['greened'] = 0
vacant_data$objectid.1 <- NULL
# Consistent naming
colnames(greened_data)[1] <- "id"
colnames(greened_data)[2] <- "date"
colnames(vacant_data)[1] <- "id"
colnames(vacant_data)[2] <- "date"
lots_data <- rbind(greened_data, vacant_data)
library(MatchIt)
library(ggplot2)
library(caret)
library(cobalt)
library(optmatch)
set.seed(1)
# ------ Part 1 (Final preprocessing adjustments)
# Todo fixed the total column
greened_data = read.csv("../neat_data/processed_data/greened_attr_with_business_new.csv")
greened_data['greened'] = 1
greened_data$id.1 <- NULL
vacant_data = read.csv("../neat_data/processed_data/vacant_attr_with_business_new.csv")
vacant_data['greened'] = 0
vacant_data$objectid.1 <- NULL
# Consistent naming
colnames(greened_data)[1] <- "id"
colnames(greened_data)[2] <- "date"
colnames(vacant_data)[1] <- "id"
colnames(vacant_data)[2] <- "date"
lots_data <- rbind(greened_data, vacant_data)
colnames(greened_data) == colnames(vacant_data)
colnames(greened_data)
library(MatchIt)
library(ggplot2)
library(caret)
library(cobalt)
library(optmatch)
set.seed(1)
# ------ Part 1 (Final preprocessing adjustments)
# Todo fixed the total column
greened_data = read.csv("../neat_data/processed_data/greened_attr_with_business_new.csv")
greened_data['greened'] = 1
greened_data$X <- NULL
greened_data$id.1 <- NULL
vacant_data = read.csv("../neat_data/processed_data/vacant_attr_with_business_new.csv")
vacant_data['greened'] = 0
vacant_data$X <- NULL
vacant_data$objectid.1 <- NULL
# Consistent naming
colnames(greened_data)[1] <- "id"
colnames(greened_data)[2] <- "date"
colnames(vacant_data)[1] <- "id"
colnames(vacant_data)[2] <- "date"
# Stack dataframes on top of each other
lots_data <- rbind(greened_data, vacant_data)
lots_data <- lots_data[complete.cases(lots_data),]
# Select only White, Black, Asian, and Hispanic for demographic data
lots_data[,c(13,16,18:20,22:28)] <- list(NULL)
# Rename long columns and save
colnames(lots_data)[12] <- "block_total_count"
colnames(lots_data)[13] <- "white_percent"
colnames(lots_data)[14] <- "black_percent"
colnames(lots_data)[15] <- "asian_percent"
colnames(lots_data)[16] <- "hispanic_percent"
colnames(lots_data)[17] <- "block_per_capita_income"
colnames(lots_data)
write.csv(lots_data, "../neat_data/processed_data/all_lots_attributes_with_business_new.csv", row.names=FALSE)
# ------ Part 2 (The official model part) ----------
lots_data = read.csv("../neat_data/processed_data/all_lots_attributes_with_business_new.csv")
lots_data_ids <- lots_data['id']
# Drop columns that aren't predictors
# Dropping date and id
lots_data[1:2] <- list(NULL)
lots_data[,c(5)] <- list(NULL)
# Log the income data to smoothen skew
lots_data[, 14] <- log(lots_data[, 14])
lots_data$Other <- list(NULL)
lots_data$income_to_poverty_over_2.00 <- list(NULL)
lots_data = read.csv("../neat_data/processed_data/all_lots_attributes_with_business_new.csv")
lots_data_ids <- lots_data['id']
# Drop columns that aren't predictors
# Dropping date and id
lots_data[1:2] <- list(NULL)
# Drop columns that would be bad for dummy variables
# We are dropping columns:
# "Other"
lots_data$Other <- list(NULL)
lots_data$income_to_poverty_over_2.00 <- list(NULL)
# Log the income data to smoothen skew
lots_data$block_per_capita_income <- log(lots_data$block_per_capita_income)
logit_model <- glm(greened ~ ., data = lots_data, family = "binomial")
summary(logit_model)
lots_data$Other
lots_data$Other <- NULL
lots_data[1:2]
lots_data$Other <- NULL
lots_data = read.csv("../neat_data/processed_data/all_lots_attributes_with_business_new.csv")
lots_data_ids <- lots_data['id']
# Drop columns that aren't predictors
# Dropping date and id
lots_data[1:2] <- list(NULL)
# Drop columns that would be bad for dummy variables
# We are dropping columns:
# "Other"
lots_data$Other <- NULL
lots_data$income_to_poverty_over_2.00 <- NULL
# Log the income data to smoothen skew
lots_data$block_per_capita_income <- log(lots_data$block_per_capita_income)
lots_data$block_per_capita_income
logit_model <- glm(greened ~ ., data = lots_data, family = "binomial")
summary(logit_model)
class_percent = sum(lots_data$greened == 1) / nrow(lots_data)
preds <- predict(logit_model, newdata = lots_data[, -26], type = "response")
confusionMatrix(table(as.numeric(preds>class_percent), reference = lots_data$greened))
lots_data[, -32]
class_percent = sum(lots_data$greened == 1) / nrow(lots_data)
preds <- predict(logit_model, newdata = lots_data[, -32], type = "response")
confusionMatrix(table(as.numeric(preds>class_percent), reference = lots_data$greened))
propensity_scores = as.data.frame(predict(logit_model, lots_data[, -32], type="response"))
colnames(propensity_scores)[1] <- "score"
n <- names(lots_data)
f <- as.formula(paste("greened ~", paste(n[!n %in% "greened"], collapse = " + ")))
variables = colnames(lots_data[, -26])
lots_data2 = lots_data[1:nrow(lots_data),]
# Single match
mod_match <- matchit(f,
method = "nearest",
data = lots_data2,
caliper = 0.2,
mahvars=variables,
distance=propensity_scores$score)
match_results <- summary(mod_match)
match_results
set.cobalt.options(binary = "std")
love.plot(mod_match, binary = "std", threshold = 0.2, shapes = c("circle", "triangle"), sample.names = c("Unmatched", "matched"), colors = c("#aaaaaa", "#333333"))
propensity_scores = as.data.frame(predict(logit_model, lots_data[, -32], type="response"))
colnames(propensity_scores)[1] <- "score"
n <- names(lots_data)
f <- as.formula(paste("greened ~", paste(n[!n %in% "greened"], collapse = " + ")))
variables = colnames(lots_data[, -32])
lots_data2 = lots_data[1:nrow(lots_data),]
# Single match
mod_match <- matchit(f,
method = "nearest",
data = lots_data2,
caliper = 0.2,
mahvars=variables,
distance=propensity_scores$score)
match_results <- summary(mod_match)
match_results
set.cobalt.options(binary = "std")
love.plot(mod_match, binary = "std", threshold = 0.2, shapes = c("circle", "triangle"), sample.names = c("Unmatched", "matched"), colors = c("#aaaaaa", "#333333"))
lots_data_with_id <- lots_data
lots_data_with_id['id'] <- lots_data_ids
# Look at matches
matches <- as.data.frame(mod_match$match.matrix)
# Append the match date to vacant lot id
matches["match_greened_date"] <- greened_data['date']
matches["greened_id"] <- greened_data['id']
# Drop the null data
matches = na.omit(matches)
vacant_match_index <- as.numeric(as.vector(unlist(matches['1'], use.names = FALSE)))
matches["vacant_id"] <- sapply(vacant_match_index, function(x) lots_data_with_id$id[x])
write.csv(matches, "../neat_data/processed_data/lot_paired_matches_with_business_new.csv")
match_results
greened = read.csv("../neat_data/processed_data/greened_lots_crime_counts.csv", header = T)
vacant = read.csv("../neat_data/processed_data/vacant_lots_crime_counts_new.csv", header = T)
# calculate differences before and after
greened["diff_100_nv"] = greened$nonviolent_100_after - greened$nonviolent_100_before
greened["diff_200_nv"] = greened$nonviolent_200_after - greened$nonviolent_200_before
greened["diff_500_nv"] = greened$nonviolent_500_after - greened$nonviolent_500_before
greened["diff_100_v"] = greened$violent_100_after - greened$violent_100_before
greened["diff_200_v"] = greened$violent_200_after - greened$violent_200_before
greened["diff_500_v"] = greened$violent_500_after - greened$violent_500_before
greened["diff_100_t"] = greened$diff_100_nv + greened$diff_100_v
greened["diff_200_t"] = greened$diff_200_nv + greened$diff_200_v
greened["diff_500_t"] = greened$diff_500_nv + greened$diff_500_v
vacant["diff_100_nv"] = vacant$nonviolent_100_after - vacant$nonviolent_100_before
vacant["diff_200_nv"] = vacant$nonviolent_200_after - vacant$nonviolent_200_before
vacant["diff_500_nv"] = vacant$nonviolent_500_after - vacant$nonviolent_500_before
vacant["diff_100_v"] = vacant$violent_100_after - vacant$violent_100_before
vacant["diff_200_v"] = vacant$violent_200_after - vacant$violent_200_before
vacant["diff_500_v"] = vacant$violent_500_after - vacant$violent_500_before
vacant["diff_100_t"] = vacant$diff_100_nv + vacant$diff_100_v
vacant["diff_200_t"] = vacant$diff_200_nv + vacant$diff_200_v
vacant["diff_500_t"] = vacant$diff_500_nv + vacant$diff_500_v
colnames(greened)[2] <- "greened_id"
greened = read.csv("../neat_data/processed_data/greened_lots_crime_counts.csv", header = T)
vacant = read.csv("../neat_data/processed_data/vacant_lots_crime_counts_new.csv", header = T)
# calculate differences before and after
greened["diff_100_nv"] = greened$nonviolent_100_after - greened$nonviolent_100_before
greened["diff_200_nv"] = greened$nonviolent_200_after - greened$nonviolent_200_before
greened["diff_500_nv"] = greened$nonviolent_500_after - greened$nonviolent_500_before
greened["diff_100_v"] = greened$violent_100_after - greened$violent_100_before
greened["diff_200_v"] = greened$violent_200_after - greened$violent_200_before
greened["diff_500_v"] = greened$violent_500_after - greened$violent_500_before
greened["diff_100_t"] = greened$diff_100_nv + greened$diff_100_v
greened["diff_200_t"] = greened$diff_200_nv + greened$diff_200_v
greened["diff_500_t"] = greened$diff_500_nv + greened$diff_500_v
vacant["diff_100_nv"] = vacant$nonviolent_100_after - vacant$nonviolent_100_before
vacant["diff_200_nv"] = vacant$nonviolent_200_after - vacant$nonviolent_200_before
vacant["diff_500_nv"] = vacant$nonviolent_500_after - vacant$nonviolent_500_before
vacant["diff_100_v"] = vacant$violent_100_after - vacant$violent_100_before
vacant["diff_200_v"] = vacant$violent_200_after - vacant$violent_200_before
vacant["diff_500_v"] = vacant$violent_500_after - vacant$violent_500_before
vacant["diff_100_t"] = vacant$diff_100_nv + vacant$diff_100_v
vacant["diff_200_t"] = vacant$diff_200_nv + vacant$diff_200_v
vacant["diff_500_t"] = vacant$diff_500_nv + vacant$diff_500_v
colnames(greened)[2] <- "greened_id"
vacant
colnames(vacant)
greened = read.csv("../neat_data/processed_data/greened_lots_crime_counts.csv", header = T)
vacant = read.csv("../neat_data/processed_data/vacant_lots_crime_counts_new.csv", header = T)
# calculate differences before and after
greened["diff_100_nv"] = greened$nonviolent_100_after - greened$nonviolent_100_before
greened["diff_200_nv"] = greened$nonviolent_200_after - greened$nonviolent_200_before
greened["diff_500_nv"] = greened$nonviolent_500_after - greened$nonviolent_500_before
greened["diff_100_v"] = greened$violent_100_after - greened$violent_100_before
greened["diff_200_v"] = greened$violent_200_after - greened$violent_200_before
greened["diff_500_v"] = greened$violent_500_after - greened$violent_500_before
greened["diff_100_t"] = greened$diff_100_nv + greened$diff_100_v
greened["diff_200_t"] = greened$diff_200_nv + greened$diff_200_v
greened["diff_500_t"] = greened$diff_500_nv + greened$diff_500_v
vacant["diff_100_nv"] = vacant$nonviolent_100_after - vacant$nonviolent_100_before
vacant["diff_200_nv"] = vacant$nonviolent_200_after - vacant$nonviolent_200_before
vacant["diff_500_nv"] = vacant$nonviolent_500_after - vacant$nonviolent_500_before
vacant["diff_100_v"] = vacant$violent_100_after - vacant$violent_100_before
vacant["diff_200_v"] = vacant$violent_200_after - vacant$violent_200_before
vacant["diff_500_v"] = vacant$violent_500_after - vacant$violent_500_before
vacant["diff_100_t"] = vacant$diff_100_nv + vacant$diff_100_v
vacant["diff_200_t"] = vacant$diff_200_nv + vacant$diff_200_v
vacant["diff_500_t"] = vacant$diff_500_nv + vacant$diff_500_v
colnames(greened)[2] <- "greened_id"
merged = merge(greened, vacant, by="greened_id", suffixes = c(".greened", ".vacant"))
colnames(merged)
# Pull land use data for greened and vacant
greened_attr = read.csv("../neat_data/processed_data/greened_lots_attr.csv")
colnames(greened_attr)[1]
colnames(greened_attr)[1] <- "greened_id"
colnames(greened_attr)[-1:-2]
colnames(greened_attr)[-1:-2] <- paste(colnames(greened_attr)[-1:-2], ".g", sep="")
vacant_attr = read.csv("../neat_data/processed_data/vacant_lots_attr.csv")
colnames(vacant_attr)[-1:-2]
# Pull land use data for greened and vacant
greened_attr = read.csv("../neat_data/processed_data/greened_lots_attr_new.csv")
colnames(greened_attr)[1] <- "greened_id"
colnames(greened_attr)[-1:-2]
colnames(greened_attr)[-1:-2] <- paste(colnames(greened_attr)[-1:-2], ".g", sep="")
vacant_attr = read.csv("../neat_data/processed_data/vacant_lots_attr_new.csv")
colnames(vacant_attr)[-1:-2] <- paste(colnames(vacant_attr)[-1:-2], ".v", sep="")
colnames(vacant_attr)[1]
colnames(vacant_attr)[1] <- "vacant_id"
# Inner merge
merged <- merge(merged, greened_attr, by="greened_id")
merged <- merge(merged, vacant_attr, by="vacant_id")
output_all <- data.frame(matrix(ncol=9, nrow=9))
colnames(output_all) <- c('stratum', 'percentile', 't', 'p', 'est', 'se', 'dof', 'type', 'radius')
t1 <- c(t.test(merged$diff_100_t.greened, merged$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(merged$diff_200_t.greened, merged$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(merged$diff_500_t.greened, merged$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(merged$diff_100_nv.greened, merged$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(merged$diff_200_nv.greened, merged$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(merged$diff_500_nv.greened, merged$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(merged$diff_100_v.greened, merged$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(merged$diff_200_v.greened, merged$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(merged$diff_500_v.greened, merged$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
count = 1
for (test in tests) {
test_row = c('all', 'all', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output_all[count, ] <- test_row
count <- count + 1
}
output_all
write.csv(output_all, "../neat_data/analysis_results/all_pairs_tests_new.csv", row.names=FALSE)
output <- data.frame(matrix(ncol=9, nrow=9*2*8))
colnames(output) <- c('stratum', 'percentile', 't', 'p', 'est', 'se', 'dof', 'type', 'radius')
strata = c("Civic", "Commercial", "Cultural", "Industrial", "Transportation", "Vacant", "Water", "Residential")
# T-test among land use strata
count = 1
for (land_attr in strata) {
print(land_attr)
# Top percentile of strata
top_cutoff = quantile(c(merged[[paste(land_attr, ".g", sep="")]], merged[[paste(land_attr, ".v", sep="")]]), probs = c(0.25, 0.75))
subset_top = merged[merged[,paste(land_attr, ".g", sep="")] >= top_cutoff[2] & merged[,paste(land_attr, ".v", sep="")] >= top_cutoff[2],]
# Total
t1 <- c(t.test(subset_top$diff_100_t.greened, subset_top$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(subset_top$diff_200_t.greened, subset_top$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(subset_top$diff_500_t.greened, subset_top$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(subset_top$diff_100_nv.greened, subset_top$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(subset_top$diff_200_nv.greened, subset_top$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(subset_top$diff_500_nv.greened, subset_top$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(subset_top$diff_100_v.greened, subset_top$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(subset_top$diff_200_v.greened, subset_top$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(subset_top$diff_500_v.greened, subset_top$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
for (test in tests) {
test_row = c(land_attr, 'top_75th', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output[count, ] <- test_row
count <- count + 1
}
# Bottom percentile of strata
subset_bot = merged[merged[,paste(land_attr, ".g", sep="")] <= top_cutoff[1] & merged[,paste(land_attr, ".v", sep="")] <= top_cutoff[1],]
# Total
t1 <- c(t.test(subset_bot$diff_100_t.greened, subset_bot$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(subset_bot$diff_200_t.greened, subset_bot$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(subset_bot$diff_500_t.greened, subset_bot$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(subset_bot$diff_100_nv.greened, subset_bot$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(subset_bot$diff_200_nv.greened, subset_bot$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(subset_bot$diff_500_nv.greened, subset_bot$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(subset_bot$diff_100_v.greened, subset_bot$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(subset_bot$diff_200_v.greened, subset_bot$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(subset_bot$diff_500_v.greened, subset_bot$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
for (test in tests) {
test_row = c(land_attr, 'bot_25th', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output[count, ] <- test_row
count <- count + 1
}
}
output
write.csv(output, "../neat_data/analysis_results/land_use_strata_tests_new.csv", row.names=FALSE)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
# Load the data
all_tests = read.csv("../neat_data/analysis_results/all_pairs_tests_new.csv")
segment_tests = read.csv("../neat_data/analysis_results/land_use_strata_tests_new.csv")
segment_tests$is_signif = segment_tests$p <= 0.05
# Determine if the data is significant
types = c("total", "violent", "nonviolent")
for (crime_type in types) {
for (crime_radius in c(100, 200, 500)) {
# Get the relevant scores for the crimes
sub_tests = subset(segment_tests, type == crime_type & radius == crime_radius)
all_relevant_scores = subset(all_tests, type == crime_type & radius == crime_radius)
# Plot the stratum scores
p <- ggplot(sub_tests, aes(est, stratum))
p <- p + geom_point(aes(colour = factor(percentile), shape = factor(is_signif), size=5)) + guides(size=FALSE)+
scale_color_manual(values=c('#aaaaaa','#111111'))+
scale_shape_manual(values=c(1, 16))
# Mark the line for the basic score
p <- p + geom_vline(xintercept = all_relevant_scores$est)
p <- p + ggtitle(paste("Land use effects for", crime_type, "crimes with radius", crime_radius))
p
filename <- paste("../neat_img/land_use_stratum_", crime_type, "_", crime_radius, ".png", sep="")
ggsave(filename, width = 6, height = 4)
}
}
greened = read.csv("../neat_data/processed_data/greened_lots_crime_counts.csv", header = T)
vacant = read.csv("../neat_data/processed_data/vacant_lots_crime_counts_with_business_new.csv", header = T)
greened["diff_100_nv"] = greened$nonviolent_100_after - greened$nonviolent_100_before
greened["diff_200_nv"] = greened$nonviolent_200_after - greened$nonviolent_200_before
greened["diff_500_nv"] = greened$nonviolent_500_after - greened$nonviolent_500_before
greened["diff_100_v"] = greened$violent_100_after - greened$violent_100_before
greened["diff_200_v"] = greened$violent_200_after - greened$violent_200_before
greened["diff_500_v"] = greened$violent_500_after - greened$violent_500_before
greened["diff_100_t"] = greened$diff_100_nv + greened$diff_100_v
greened["diff_200_t"] = greened$diff_200_nv + greened$diff_200_v
greened["diff_500_t"] = greened$diff_500_nv + greened$diff_500_v
vacant["diff_100_nv"] = vacant$nonviolent_100_after - vacant$nonviolent_100_before
vacant["diff_200_nv"] = vacant$nonviolent_200_after - vacant$nonviolent_200_before
vacant["diff_500_nv"] = vacant$nonviolent_500_after - vacant$nonviolent_500_before
vacant["diff_100_v"] = vacant$violent_100_after - vacant$violent_100_before
vacant["diff_200_v"] = vacant$violent_200_after - vacant$violent_200_before
vacant["diff_500_v"] = vacant$violent_500_after - vacant$violent_500_before
vacant["diff_100_t"] = vacant$diff_100_nv + vacant$diff_100_v
vacant["diff_200_t"] = vacant$diff_200_nv + vacant$diff_200_v
vacant["diff_500_t"] = vacant$diff_500_nv + vacant$diff_500_v
colnames(greened)[2] <- "greened_id"
merged = merge(greened, vacant, by="greened_id", suffixes = c(".greened", ".vacant"))
colnames(merged)
# Pull land use data for greened and vacant
greened_attr = read.csv("../neat_data/processed_data/greened_attr_with_business_new.csv")
greened_attr$X <- NULL
colnames(greened_attr)[1] <- "greened_id"
colnames(greened_attr)[-1:-2] <- paste(colnames(greened_attr)[-1:-2], ".g", sep="")
vacant_attr = read.csv("../neat_data/processed_data/vacant_attr_with_business_new.csv")
vacant_attr
vacant_attr$X <- NULL
colnames(vacant_attr)[-1:-2]
colnames(vacant_attr)[-1:-2] <- paste(colnames(vacant_attr)[-1:-2], ".v", sep="")
colnames(vacant_attr)[1] <- "vacant_id"
# Inner merge
merged <- merge(merged, greened_attr, by="greened_id")
merged <- merge(merged, vacant_attr, by="vacant_id")
colnames(merged)
output_all <- data.frame(matrix(ncol=9, nrow=9))
colnames(output_all) <- c('stratum', 'percentile', 't', 'p', 'est', 'se', 'dof', 'type', 'radius')
t1 <- c(t.test(merged$diff_100_t.greened, merged$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(merged$diff_200_t.greened, merged$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(merged$diff_500_t.greened, merged$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(merged$diff_100_nv.greened, merged$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(merged$diff_200_nv.greened, merged$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(merged$diff_500_nv.greened, merged$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(merged$diff_100_v.greened, merged$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(merged$diff_200_v.greened, merged$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(merged$diff_500_v.greened, merged$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
count = 1
for (test in tests) {
test_row = c('all', 'all', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output_all[count, ] <- test_row
count <- count + 1
}
output_all
write.csv(output_all, "../neat_data/analysis_results/all_pairs_tests_with_business_new.csv", row.names=FALSE)
output <- data.frame(matrix(ncol=9, nrow=9*2*9))
colnames(output) <- c('stratum', 'percentile', 't', 'p', 'est', 'se', 'dof', 'type', 'radius')
strata = c("cafe", "convenience", "gym", "liquor", "lodging", "nightlife", "pharmacy", "restaurant", "business_count")
# T-test among land use strata
count = 1
for (business_attr in strata) {
print(business_attr)
# Top percentile of strata
if (business_attr == "business_count") {
top_cutoff = quantile(c(merged[[paste(business_attr, ".g", sep="")]], merged[[paste(business_attr, ".v", sep="")]]), probs = c(0.25, 0.75))
} else {
top_cutoff = c(0,1)
}
subset_top = merged[merged[,paste(business_attr, ".g", sep="")] >= top_cutoff[2] & merged[,paste(business_attr, ".v", sep="")] >= top_cutoff[2],]
# Total
t1 <- c(t.test(subset_top$diff_100_t.greened, subset_top$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(subset_top$diff_200_t.greened, subset_top$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(subset_top$diff_500_t.greened, subset_top$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(subset_top$diff_100_nv.greened, subset_top$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(subset_top$diff_200_nv.greened, subset_top$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(subset_top$diff_500_nv.greened, subset_top$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(subset_top$diff_100_v.greened, subset_top$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(subset_top$diff_200_v.greened, subset_top$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(subset_top$diff_500_v.greened, subset_top$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
for (test in tests) {
test_row = c(business_attr, 'top_75th', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output[count, ] <- test_row
count <- count + 1
}
# Bottom percentile of strata
subset_bot = merged[merged[,paste(business_attr, ".g", sep="")] <= top_cutoff[1] & merged[,paste(business_attr, ".v", sep="")] <= top_cutoff[1],]
# Total
t1 <- c(t.test(subset_bot$diff_100_t.greened, subset_bot$diff_100_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 100)
t2 <- c(t.test(subset_bot$diff_200_t.greened, subset_bot$diff_200_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 200)
t3 <- c(t.test(subset_bot$diff_500_t.greened, subset_bot$diff_500_t.vacant, paired = TRUE, alternative = "two.sided"), "total", 500)
# Non-violent
t4 <- c(t.test(subset_bot$diff_100_nv.greened, subset_bot$diff_100_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 100)
t5 <- c(t.test(subset_bot$diff_200_nv.greened, subset_bot$diff_200_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 200)
t6 <- c(t.test(subset_bot$diff_500_nv.greened, subset_bot$diff_500_nv.vacant, paired = TRUE, alternative = "two.sided"), "nonviolent", 500)
# Violent
t7 <- c(t.test(subset_bot$diff_100_v.greened, subset_bot$diff_100_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 100)
t8 <- c(t.test(subset_bot$diff_200_v.greened, subset_bot$diff_200_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 200)
t9 <- c(t.test(subset_bot$diff_500_v.greened, subset_bot$diff_500_v.vacant, paired = TRUE, alternative = "two.sided"), "violent", 500)
tests <- list(t1, t2, t3, t4, t5, t6, t7, t8, t9)
for (test in tests) {
test_row = c(business_attr, 'bot_25th', test$statistic, test$p.value, test$estimate, test$stderr, test$parameter, test[11], test[12])
output[count, ] <- test_row
count <- count + 1
}
}
output
write.csv(output, "../neat_data/analysis_results/business_use_strata_tests_new.csv", row.names=FALSE)
# Load the data
all_tests = read.csv("../neat_data/analysis_results/all_pairs_tests_with_business_new.csv")
segment_tests = read.csv("../neat_data/analysis_results/business_use_strata_tests_new.csv")
library(ggplot2)
library(gridExtra)
library(grid)
library(gtable)
segment_tests$is_signif = segment_tests$p <= 0.05
# Determine if the data is significant
types = c("total", "violent", "nonviolent")
for (crime_type in types) {
for (crime_radius in c(100, 200, 500)) {
# Get the relevant scores for the crimes
sub_tests = subset(segment_tests, type == crime_type & radius == crime_radius)
all_relevant_scores = subset(all_tests, type == crime_type & radius == crime_radius)
# Plot the stratum scores
p <- ggplot(sub_tests, aes(est, stratum))
p <- p + geom_point(aes(colour = factor(percentile), shape = factor(is_signif), size=5)) + guides(size=FALSE)+
scale_color_manual(values=c('#aaaaaa','#111111'))+
scale_shape_manual(values=c(1, 16))
# Mark the line for the basic score
p <- p + geom_vline(xintercept = all_relevant_scores$est)
p <- p + ggtitle(paste("Business vibrancy effects for", crime_type, "crimes with radius", crime_radius)) + theme(plot.title = element_text(size = 10))
p
filename <- paste("../neat_img/business_use/business_use_stratum_", crime_type, "_", crime_radius, ".png", sep="")
ggsave(filename, width = 6, height = 4)
}
}
